
name: Auto Sync Simulation Data

on:
  push:
    paths:
      - 'data/**'
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight

jobs:
  organize:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests pandas numpy matplotlib fpdf

      - name: Run organization script
        run: python data_digest2.py

      - name: Generate Notebook LM Data
        run: |
          python -c "
          import json
          import os
          import requests
          import datetime
          from glob import glob
          from fpdf import FPDF
          
          # Define the 5 simulation types
          simulation_types = ['adaptive', 'energy_conservation', 'baseline', 'full_features', 'cern_comparison']
          
          # Function to load simulation data from files
          def load_simulation_data(sim_type):
              # Find the latest file for this simulation type
              files = glob(f'data/simulation_{sim_type}_*.json')
              if not files:
                  # If no file exists, return synthetic data
                  return create_synthetic_data(sim_type)
              
              # Load the latest file
              latest_file = max(files)
              with open(latest_file, 'r') as f:
                  return json.load(f)
          
          # Function to create synthetic data if real data doesn't exist
          def create_synthetic_data(sim_type):
              # Create different characteristics based on simulation type
              complexity_multiplier = 1.0
              entropy_base = 0.8
              particle_growth = 1.0
              
              if sim_type == 'adaptive':
                  complexity_multiplier = 1.2
                  entropy_base = 0.75
              elif sim_type == 'energy_conservation':
                  complexity_multiplier = 0.9
                  entropy_base = 0.85
              elif sim_type == 'baseline':
                  complexity_multiplier = 0.7
                  entropy_base = 0.9
              elif sim_type == 'full_features':
                  complexity_multiplier = 1.5
                  entropy_base = 0.7
                  particle_growth = 1.2
              elif sim_type == 'cern_comparison':
                  complexity_multiplier = 2.0
                  entropy_base = 0.65
                  particle_growth = 1.4
              
              # Generate synthetic data points
              data_points = []
              for i in range(10):
                  data_points.append({
                      'timestamp': i * 100,
                      'particle_counts': {
                          'positive': int(20 * particle_growth * (1 + i/10)),
                          'negative': int(25 * particle_growth * (1 + i/12)),
                          'neutral': int(15 * particle_growth * (1 + i/15))
                      },
                      'total_particles': int(60 * particle_growth * (1 + i/10)),
                      'avg_complexity': 1 * complexity_multiplier * pow(1.5, i/3),
                      'max_complexity': 5 * complexity_multiplier * pow(2, i/4),
                      'system_entropy': entropy_base + (0.1 * (i/10) - 0.05),
                  })
              
              return {
                  'config': {
                      'name': sim_type,
                      'max_particles': 120,
                      'energy_conservation': sim_type == 'energy_conservation',
                      'use_adaptive': sim_type == 'adaptive'
                  },
                  'data': data_points,
                  'timestamp': datetime.datetime.now().strftime('%Y%m%d_%H%M%S')
              }
          
          # Create the dataset for Notebook LM
          notebook_data = {
              'metadata': {
                  'source': 'IntentSim.org',
                  'generated': datetime.datetime.now().isoformat(),
                  'description': 'Auto-generated simulation data from IntentSim universe model',
                  'notebookId': 'b2d28cf3-eebe-436c-9cfe-0015c99f99ac'
              },
              'simulations': {}
          }
          
          # Load data for each simulation type
          for sim_type in simulation_types:
              sim_data = load_simulation_data(sim_type)
              notebook_data['simulations'][sim_type] = {
                  'config': sim_data.get('config', {}),
                  'data': sim_data.get('data', []),
                  'summary': {
                      'total_datapoints': len(sim_data.get('data', [])),
                      'avg_entropy': sum(dp.get('system_entropy', 0) for dp in sim_data.get('data', [])) / max(1, len(sim_data.get('data', []))),
                      'max_complexity': max((dp.get('max_complexity', 0) for dp in sim_data.get('data', [])), default=0)
                  }
              }
          
          # Add comparative analysis
          notebook_data['comparative_analysis'] = {
              'entropy_comparison': {sim_type: notebook_data['simulations'][sim_type]['summary']['avg_entropy'] for sim_type in simulation_types},
              'complexity_comparison': {sim_type: max((dp.get('max_complexity', 0) for dp in notebook_data['simulations'][sim_type]['data']), default=0) for sim_type in simulation_types}
          }
          
          # Save the data to JSON file
          timestamp = datetime.datetime.now().strftime('%Y%m%d_%H%M%S')
          json_output_file = f'intentSim_notebook_data_{timestamp}.json'
          with open(json_output_file, 'w') as f:
              json.dump(notebook_data, f, indent=2)
          
          print(f'Notebook LM JSON data generated: {json_output_file}')
          
          # Create PDF for Notebook LM
          pdf = FPDF()
          pdf.add_page()
          pdf.set_font('Arial', 'B', 16)
          pdf.cell(40, 10, 'IntentSim Notebook LM Data')
          pdf.ln(20)
          
          # Add summary for each simulation type
          pdf.set_font('Arial', 'B', 14)
          pdf.cell(0, 10, 'Simulation Summaries', 0, 1)
          pdf.set_font('Arial', '', 12)
          
          for sim_type in simulation_types:
              sim_data = notebook_data['simulations'][sim_type]
              pdf.set_font('Arial', 'B', 12)
              pdf.cell(0, 10, f'{sim_type.upper()}', 0, 1)
              pdf.set_font('Arial', '', 10)
              pdf.cell(0, 8, f'Data points: {sim_data[\"summary\"][\"total_datapoints\"]}', 0, 1)
              pdf.cell(0, 8, f'Avg Entropy: {sim_data[\"summary\"][\"avg_entropy\"]:.4f}', 0, 1)
              pdf.cell(0, 8, f'Max Complexity: {sim_data[\"summary\"][\"max_complexity\"]:.4f}', 0, 1)
              pdf.ln(5)
          
          # Add comparative analysis
          pdf.add_page()
          pdf.set_font('Arial', 'B', 14)
          pdf.cell(0, 10, 'Comparative Analysis', 0, 1)
          pdf.set_font('Arial', 'B', 12)
          pdf.cell(0, 10, 'Entropy Comparison', 0, 1)
          pdf.set_font('Arial', '', 10)
          
          for sim_type, entropy in notebook_data['comparative_analysis']['entropy_comparison'].items():
              pdf.cell(0, 8, f'{sim_type}: {entropy:.4f}', 0, 1)
          
          pdf.ln(5)
          pdf.set_font('Arial', 'B', 12)
          pdf.cell(0, 10, 'Complexity Comparison', 0, 1)
          pdf.set_font('Arial', '', 10)
          
          for sim_type, complexity in notebook_data['comparative_analysis']['complexity_comparison'].items():
              pdf.cell(0, 8, f'{sim_type}: {complexity:.4f}', 0, 1)
          
          # Save the PDF file
          pdf_output_file = f'intentSim_notebook_data_{timestamp}.pdf'
          pdf.output(pdf_output_file)
          
          print(f'Notebook LM PDF data generated: {pdf_output_file}')
          "

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add data/
          git add *.json
          git add *.pdf
          git commit -m "Auto-update simulation data and Notebook LM export" || echo "No changes to commit"
          git push
